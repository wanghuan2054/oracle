-- 获取当年
SELECT 'Y' DIM ,
       T.YEAR_TIMEKEY,
       MIN(TO_DATE(T.DATE_TIMEKEY, 'YYYYMMDD')) AS FIRST_DAY,
       MAX(TO_DATE(T.DATE_TIMEKEY, 'YYYYMMDD')) AS CURR_DAY
  FROM EDS_CALENDAR T
 WHERE T.FACTORY = 'OLED2'
   AND T.YEAR_TIMEKEY = '2020'
   AND T.DATE_TIMEKEY <= TO_CHAR(SYSDATE, 'YYYYMMDD')
 GROUP BY T.YEAR_TIMEKEY
UNION
-- 获取当前时间点前当年的所有Q
SELECT 'Q' DIM ,
       T.QUARTER_TIMEKEY,
       MIN(TO_DATE(T.DATE_TIMEKEY, 'YYYYMMDD')) AS FIRST_DAY,
       MAX(TO_DATE(T.DATE_TIMEKEY, 'YYYYMMDD')) AS CURR_DAY
  FROM EDS_CALENDAR T
 WHERE T.FACTORY = 'OLED2'
   AND T.YEAR_TIMEKEY = '2020'
   AND T.QUARTER_TIMEKEY > TO_CHAR(SYSDATE, 'q') - 3 || 'Q'
   AND T.QUARTER_TIMEKEY <= TO_CHAR(SYSDATE, 'q') || 'Q'
 GROUP BY T.QUARTER_TIMEKEY
UNION
-- 获取当年到现在所有月
SELECT 'M' DIM ,
       TO_CHAR(T.MONTH),
       MIN(TO_DATE(T.DATE_TIMEKEY, 'YYYYMMDD')) AS FIRST_DAY,
       MAX(TO_DATE(T.DATE_TIMEKEY, 'YYYYMMDD')) AS CURR_DAY
  FROM EDS_CALENDAR T
 WHERE T.FACTORY = 'OLED2'
   AND T.YEAR_TIMEKEY = '2020'
   AND T.MONTH > TO_CHAR(SYSDATE, 'MM') - 4
   AND T.MONTH <= TO_CHAR(SYSDATE, 'MM')
 GROUP BY TO_CHAR(T.MONTH)
UNION
-- 获取当前时间前N周
SELECT 'W' DIM ,
       TO_CHAR(T.WEEK_IN_YEAR),
       MIN(TO_DATE(T.DATE_TIMEKEY, 'YYYYMMDD')) AS FIRST_DAY,
       MAX(TO_DATE(T.DATE_TIMEKEY, 'YYYYMMDD')) AS CURR_DAY
  FROM EDS_CALENDAR T
 WHERE T.FACTORY = 'OLED2'
   AND T.YEAR_TIMEKEY = '2020'
   AND T.WEEK_IN_YEAR > TO_CHAR(SYSDATE, 'iw') - 4
   AND T.WEEK_IN_YEAR <= TO_CHAR(SYSDATE, 'iw')
 GROUP BY TO_CHAR(T.WEEK_IN_YEAR)
UNION
-- 获取最近几天
SELECT 'D' DIM ,
       T.DATE_TIMEKEY,
       MIN(TO_DATE(T.DATE_TIMEKEY, 'YYYYMMDD')) AS FIRST_DAY,
       MAX(TO_DATE(T.DATE_TIMEKEY, 'YYYYMMDD')) AS CURR_DAY
  FROM EDS_CALENDAR T
 WHERE T.FACTORY = 'OLED2'
   AND T.YEAR_TIMEKEY = '2020'
   AND T.DATE_TIMEKEY > TO_CHAR(SYSDATE - 4, 'YYYYMMDD')
   AND T.DATE_TIMEKEY <= TO_CHAR(SYSDATE, 'YYYYMMDD')
 GROUP BY T.DATE_TIMEKEY

--  CF Repair 需求，获取指定年、季度、月、周、天（优化SQL）
-- YEAR_TIMEKEY, QUARTER_TIMEKEY, MONTH_TIMEKEY, WEEK_IN_YEAR, DAY_TIMEKEY
-- 并将结果值依次串成一串二进制数然后再转化为十进制所得到的值。
--  值=15,标记为'Y',值=7,标记为'Q',值=3,标记为'M',值=1,标记为'W',值=0,标记为'D',值=31,标记为'N'(Flag=N，一般过滤掉)
WITH BASE_INFO AS
 (SELECT Y.YEAR_TIMEKEY,
         Y.QUARTER_TIMEKEY,
         Y.MONTH_TIMEKEY,
         Y.WEEK_IN_YEAR,
         Y.DATE_TIMEKEY AS DAY_TIMEKEY,
         X.PRODUCT_DESC,
         X.MODELTYPE,
         X.PRODUCT_SIZE,
         X.LOT_ID,
         X.DFTCODE_QTY,
         X.GLS_TTL,
         X.PNL_QTY_PER_GLS
    FROM DWD_DFTCODE_D_LOT X
    LEFT JOIN EDS_CALENDAR Y
      ON (X.REPORTDATE = TO_DATE(Y.DATE_TIMEKEY, 'YYYYMMDD') AND
         Y.SHIFT_NAME = 'A' AND Y.FACTORY = 'OLED2' AND
         Y.YEAR_TIMEKEY = '2020' /*传参*/
         )
   WHERE (X.DFTCODE IS NULL OR SUBSTR(X.DFTCODE, 1, 1) != 'E')
     AND X.FLOORNAME = '4' --传参
     AND X.PRODUCT_SIZE >= 10.0 --传参
     AND X.PRODUCT_DESC NOT LIKE '%Flow'
     AND X.REPORTDATE <= TO_DATE('20201104', 'YYYYMMDD') --传参
     /*AND X.REPORTDATE >= TO_DATE('20200101', 'YYYYMMDD')*/ --传参
  ),
TEMP_INFO AS
 (SELECT YEAR_TIMEKEY,
         QUARTER_TIMEKEY,
         MONTH_TIMEKEY,
         WEEK_IN_YEAR,
         DAY_TIMEKEY,
         PRODUCT_DESC,
         MODELTYPE,
         SUM(DFTCODE_QTY) AS DFTCODE_TTL,
         SUM(GLS_TTL * PNL_QTY_PER_GLS) TOTALP,
         COUNT(LOT_ID) LOT_COUNT,
         DECODE(GROUPING_ID(YEAR_TIMEKEY,
                            QUARTER_TIMEKEY,
                            MONTH_TIMEKEY,
                            WEEK_IN_YEAR,
                            DAY_TIMEKEY),
                15,
                'Y',
                7,
                'Q',
                3,
                'M',
                1,
                'W',
                0,
                'D',
                31,
                'N') AS FLAG
    FROM BASE_INFO T
   GROUP BY ROLLUP((YEAR_TIMEKEY, PRODUCT_DESC, MODELTYPE),
                   (YEAR_TIMEKEY, QUARTER_TIMEKEY, PRODUCT_DESC, MODELTYPE),
                   (YEAR_TIMEKEY, QUARTER_TIMEKEY, MONTH_TIMEKEY, PRODUCT_DESC,
                    MODELTYPE),
                   (YEAR_TIMEKEY, QUARTER_TIMEKEY, MONTH_TIMEKEY, WEEK_IN_YEAR,
                    PRODUCT_DESC, MODELTYPE),
                   (YEAR_TIMEKEY, QUARTER_TIMEKEY, MONTH_TIMEKEY, WEEK_IN_YEAR,
                    DAY_TIMEKEY, PRODUCT_DESC, MODELTYPE))
   ORDER BY YEAR_TIMEKEY,
            QUARTER_TIMEKEY,
            MONTH_TIMEKEY,
            WEEK_IN_YEAR,
            DAY_TIMEKEY,
            PRODUCT_DESC,
            MODELTYPE)

SELECT YEAR_TIMEKEY,
       PRODUCT_DESC || '(' || MODELTYPE || ')' AS PRODUCT_DESC,
       (1 - ROUND(DFTCODE_TTL / TOTALP, 4)) * 100 || '%' || '(' ||
       LOT_COUNT || ')' AS RATE,
       1 AS SEQ
  FROM TEMP_INFO T
 WHERE T.FLAG = 'Y'
 UNION 
 SELECT QUARTER_TIMEKEY,
       PRODUCT_DESC || '(' || MODELTYPE || ')' AS PRODUCT_DESC,
       (1 - ROUND(DFTCODE_TTL / TOTALP, 4)) * 100 || '%' || '(' ||
       LOT_COUNT || ')' AS RATE,
       2 AS SEQ
  FROM TEMP_INFO T
 WHERE T.FLAG = 'Q'
  UNION 
 SELECT MONTH_TIMEKEY,
       PRODUCT_DESC || '(' || MODELTYPE || ')' AS PRODUCT_DESC,
       (1 - ROUND(DFTCODE_TTL / TOTALP, 4)) * 100 || '%' || '(' ||
       LOT_COUNT || ')' AS RATE,
       3 AS SEQ
  FROM TEMP_INFO T
 WHERE T.FLAG = 'M'
   UNION 
 SELECT MONTH_TIMEKEY,
       PRODUCT_DESC || '(' || MODELTYPE || ')' AS PRODUCT_DESC,
       (1 - ROUND(DFTCODE_TTL / TOTALP, 4)) * 100 || '%' || '(' ||
       LOT_COUNT || ')' AS RATE,
       4 AS SEQ
  FROM TEMP_INFO T
 WHERE T.FLAG = 'W'
    UNION 
 SELECT DAY_TIMEKEY,
       PRODUCT_DESC || '(' || MODELTYPE || ')' AS PRODUCT_DESC,
       (1 - ROUND(DFTCODE_TTL / TOTALP, 4)) * 100 || '%' || '(' ||
       LOT_COUNT || ')' AS RATE,
       5 AS SEQ
  FROM TEMP_INFO T
 WHERE T.FLAG = 'D'
 ORDER BY seq 

